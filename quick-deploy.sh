#!/bin/bash

# –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π –Ω–∞ Timeweb.cloud
# –ê–≤—Ç–æ—Ä: AI Assistant
# –í–µ—Ä—Å–∏—è: 1.0

set -e

echo "üöÄ –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π –Ω–∞ Timeweb.cloud..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
if [ $# -eq 0 ]; then
    log_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <your-domain.com> [--ssl] [--prod]"
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 mysite.com                    # –ë–∞–∑–æ–≤—ã–π –¥–µ–ø–ª–æ–π"
    echo "  $0 mysite.com --ssl              # –° SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏"
    echo "  $0 mysite.com --ssl --prod       # –ü—Ä–æ–¥–∞–∫—à–Ω —Å Nginx"
    exit 1
fi

DOMAIN=$1
USE_SSL=false
USE_PROD=false

# –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
for arg in "$@"; do
    case $arg in
        --ssl)
            USE_SSL=true
            shift
            ;;
        --prod)
            USE_PROD=true
            shift
            ;;
    esac
done

log_info "–î–æ–º–µ–Ω: $DOMAIN"
log_info "SSL: $USE_SSL"
log_info "–ü—Ä–æ–¥–∞–∫—à–Ω: $USE_PROD"

# 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É
log_step "1. –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É..."
sudo apt update && sudo apt upgrade -y

# 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
if ! command -v docker &> /dev/null; then
    log_step "2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..."
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
    sudo apt install -y apt-transport-https ca-certificates curl software-properties-common

    # –î–æ–±–∞–≤–ª—è–µ–º GPG –∫–ª—é—á Docker
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
    sudo apt update
    sudo apt install -y docker-ce docker-ce-cli containerd.io

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose
    sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
    sudo usermod -aG docker $USER
    
    log_warn "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ/–≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."
else
    log_info "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π—Ä–≤–æ–ª
log_step "3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π—Ä–≤–æ–ª..."
sudo ufw allow 22/tcp    # SSH
sudo ufw allow 80/tcp    # HTTP
sudo ufw allow 443/tcp   # HTTPS
sudo ufw allow 3000/tcp  # Frontend
sudo ufw allow 8000/tcp  # Backend
sudo ufw --force enable

# 4. –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª—ã
log_step "4. –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª—ã..."

# Backend .env
if [ ! -f "backend/.env" ]; then
    log_warn "–°–æ–∑–¥–∞–µ–º backend/.env —Ñ–∞–π–ª..."
    cat > backend/.env << EOF
# Database
DB_NAME=avito_db
DB_USER=avito_user
DB_PASSWORD=$(openssl rand -base64 32)

# Django
SECRET_KEY=$(python3 -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())')
DEBUG=False
ALLOWED_HOSTS=localhost,127.0.0.1,$DOMAIN,www.$DOMAIN

# Celery
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0

# Email (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password

# AWS S3 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
AWS_ACCESS_KEY_ID=your_aws_key
AWS_SECRET_ACCESS_KEY=your_aws_secret
AWS_STORAGE_BUCKET_NAME=your_bucket_name
EOF
    log_info "backend/.env —Å–æ–∑–¥–∞–Ω. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ!"
else
    log_info "backend/.env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# Frontend .env
if [ ! -f "frontend/.env" ]; then
    log_warn "–°–æ–∑–¥–∞–µ–º frontend/.env —Ñ–∞–π–ª..."
    if [ "$USE_SSL" = true ]; then
        API_URL="https://$DOMAIN"
    else
        API_URL="http://$DOMAIN"
    fi
    
    cat > frontend/.env << EOF
NEXT_PUBLIC_API_URL=$API_URL
NODE_ENV=production
EOF
    log_info "frontend/.env —Å–æ–∑–¥–∞–Ω"
else
    log_info "frontend/.env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# 5. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
log_step "5. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose down 2>/dev/null || true
if [ "$USE_PROD" = true ]; then
    docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
fi

# 6. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
log_step "6. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã..."
docker system prune -f

# 7. –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
log_step "7. –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."

if [ "$USE_PROD" = true ]; then
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏—é —Å Nginx..."
    docker-compose -f docker-compose.prod.yml up -d --build
    COMPOSE_FILE="docker-compose.prod.yml"
else
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é..."
    docker-compose up -d --build
    COMPOSE_FILE="docker-compose.yml"
fi

# 8. –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
log_step "8. –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sleep 15

# 9. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
log_step "9. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏..."
docker-compose -f $COMPOSE_FILE exec -T backend python manage.py migrate

# 10. –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
log_step "10. –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã..."
docker-compose -f $COMPOSE_FILE exec -T backend python manage.py collectstatic --noinput

# 11. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSL (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if [ "$USE_SSL" = true ]; then
    log_step "11. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã..."
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Certbot
    sudo apt install -y certbot python3-certbot-nginx
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Nginx
    sudo tee /etc/nginx/sites-available/temp-ssl << EOF
server {
    listen 80;
    server_name $DOMAIN www.$DOMAIN;
    
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }
    
    location /api/ {
        proxy_pass http://localhost:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOF

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    sudo ln -sf /etc/nginx/sites-available/temp-ssl /etc/nginx/sites-enabled/
    sudo nginx -t
    sudo systemctl restart nginx

    # –ü–æ–ª—É—á–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    sudo certbot --nginx -d $DOMAIN -d www.$DOMAIN --non-interactive --agree-tos --email admin@$DOMAIN

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    mkdir -p ssl
    sudo cp /etc/letsencrypt/live/$DOMAIN/fullchain.pem ssl/cert.pem
    sudo cp /etc/letsencrypt/live/$DOMAIN/privkey.pem ssl/key.pem
    sudo chown $USER:$USER ssl/cert.pem ssl/key.pem
    sudo chmod 644 ssl/cert.pem
    sudo chmod 600 ssl/key.pem

    # –û–±–Ω–æ–≤–ª—è–µ–º nginx.conf —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–æ–º–µ–Ω–æ–º
    sed -i "s/your-domain.com/$DOMAIN/g" nginx.conf

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    sudo rm -f /etc/nginx/sites-enabled/temp-ssl
    sudo rm -f /etc/nginx/sites-available/temp-ssl

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    (crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet && cp /etc/letsencrypt/live/$DOMAIN/fullchain.pem ssl/cert.pem && cp /etc/letsencrypt/live/$DOMAIN/privkey.pem ssl/key.pem && docker-compose restart nginx") | crontab -

    log_info "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!"
fi

# 12. –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
read -p "–°–æ–∑–¥–∞—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_step "12. –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    docker-compose -f $COMPOSE_FILE exec -T backend python manage.py createsuperuser
fi

# 13. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
log_step "13. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f $COMPOSE_FILE ps

# 14. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
log_info "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
log_info "–î–æ–º–µ–Ω: $DOMAIN"
if [ "$USE_SSL" = true ]; then
    log_info "SSL: –ù–∞—Å—Ç—Ä–æ–µ–Ω"
    log_info "URL: https://$DOMAIN"
else
    log_info "SSL: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    log_info "URL: http://$DOMAIN"
fi

if [ "$USE_PROD" = true ]; then
    log_info "–†–µ–∂–∏–º: –ü—Ä–æ–¥–∞–∫—à–Ω (—Å Nginx)"
else
    log_info "–†–µ–∂–∏–º: –ë–∞–∑–æ–≤—ã–π"
fi

log_info "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
log_info "  –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: docker-compose -f $COMPOSE_FILE logs -f"
log_info "  –°—Ç–∞—Ç—É—Å: docker-compose -f $COMPOSE_FILE ps"
log_info "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose -f $COMPOSE_FILE restart"
log_info "  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: git pull && docker-compose -f $COMPOSE_FILE up -d --build"

# 15. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
read -p "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_info "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)..."
    docker-compose -f $COMPOSE_FILE logs -f
fi 