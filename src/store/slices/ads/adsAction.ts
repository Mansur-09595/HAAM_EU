import { createAsyncThunk } from '@reduxjs/toolkit'
import { Ads } from '@/types/IAds' // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è

// üîÅ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
export const fetchAds = createAsyncThunk('ads/fetchAds', async () => {
  const res = await fetch('http://localhost:8000/api/listings/')
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ')
  const data = await res.json()
  return data.results as Ads[]
})

// ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
export const addAd = createAsyncThunk<
  Ads,          // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  FormData,     // –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî FormData
  { rejectValue: string }
>(
  'ads/addAd',
  async (newAd, { rejectWithValue }) => {
    const token = localStorage.getItem('accessToken')
    if (!token) {
      // –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤–æ–æ–±—â–µ
      return rejectWithValue('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
    }

    const res = await fetch('http://localhost:8000/api/listings/', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${token}`,
      },
      body: newAd,
    })

    const data = await res.json()
    if (!res.ok) {
      // 401/403 ‚Üí –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (res.status === 401 || res.status === 403) {
        return rejectWithValue('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
      }
      // –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ API
      return rejectWithValue(data.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
    }

    return data as Ads
  }
)

// üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ ID
export const fetchAdBySlug = createAsyncThunk("ads/fetchBySlug", async (slug: string) => {
    const res = await fetch(`http://localhost:8000/api/listings/${slug}/`)
    if (res.status === 404) {
      // –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å null –∏ –æ—Ç–ª–æ–≤–∏—Ç—å —ç—Ç–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
      return null
    }
    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
    return (await res.json()) as Ads
  }
)

